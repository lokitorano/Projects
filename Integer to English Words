ones = ["One ","Two ","Three ","Four ","Five ","Six ","Seven ","Eight ","Nine "]
tens = ["Ten ","Twenty ","Thirty ","Forty ","Fifty ","Sixty ","Seventy ","Eighty ","Ninety ", "Hundred "]
teens = ["Eleven ","Twelve ","Thirteen ","Fourteen ","Fifteen ","Sixteen ","Seventeen ","Eighteen ","Nineteen "]
huns = ["Thousand ", "Million ","Billion ","Trillion ","quadrillion ","quintillion ","sextillion "]




class Solution:
    def numberToWords(self, num: int) -> str:
        meta = []
        def num_find(n:int ) -> str:
            if n == 0:
                return ""
            elif n < 10:
                return str(ones[n-1])
            elif n > 10 and n<20:
                return str(teens[int(n%10)-1])
            elif n < 100 and n >= 00 and n%10 == 0:
                return str(tens[int(n/10)-1])
            elif n < 100 and n >= 20 and n%10 != 0:
                return str(tens[int(n/10)-1])+str(ones[int(n%10)-1])
            elif n >= 100:
                if n%100==0:
                    return str(ones[int(n/100)-1]+"Hundred ")
                else:
                    return str(ones[int(n/100)-1]+"Hundred ")



        if num == 0:
            return "Zero"
        num_l = []
        c = 0
        s_n = list(str(num))
        for i in reversed(range(len(str(num)))):
            num_l.append(s_n[i])
            c+=1
            if c==3:
                c=0
                if i != 0:
                    num_l.append(",")
        x = "".join(reversed(num_l))
        x_l = x.split(",")
        p=0
        non = x_l[p]
        for i in reversed(range(0,len(x_l))):
            res = []
            if i == 0:
                n=int(non)
                if n > 100:
                    while len(str(n))!=0:
                        if n != 0:
                            res += num_find(n)
                        if len(str(n))>1 and not (n > 10 and n < 100) :
                            n = int("".join(str(n)[1:]))
                        else:
                            break
                    else:
                        break
                else:
                    res += num_find(n)
            else:
                n = int(non)
                ret = "true"
                if int(non) > 100:
                    while len(str(n))!=0:
                        if n != 0:
                            res += num_find(n)
                        if len(str(n))>1 and not (n > 10 and n < 100) :
                            if len(str(n))-1 > 0:
                                n = int("".join(str(n)[1:]))
                        else:
                            break
                    else:
                        break
                else:
                    ret = num_find(n)
                    res += ret
                if ret != "":
                    res.append(huns[i-1])
            if p+1 < len(x_l):
                non = x_l[p+1]
            p+=1
            meta.append(("".join(res)))
        return ("".join(meta).strip())
